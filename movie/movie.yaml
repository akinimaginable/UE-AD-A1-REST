openapi: 3.1.1

info:
  title: API Films
  summary: API du service de gestion des films
  description: |
    Cette API gère le catalogue de films du cinéma. Elle fournit des endpoints pour créer, 
    lire, mettre à jour et supprimer des films. Les opérations d'administration (POST, PUT, DELETE) 
    nécessitent une authentification et sont validées via le service User pour vérifier les 
    privilèges administrateurs. Ce service est utilisé par le service Booking pour valider 
    l'existence des films et récupérer les détails des films pour enrichir les informations de réservation.
  contact:
    name: Clovis SFEIR & Ema ALBISSON
  license:
    name: GPL v3
    url: https://www.gnu.org/licenses/gpl-3.0.en.html
  version: 1.0.0

tags:
  - name: admins
    description: Appels sécurisés réservés aux administrateurs
  - name: développeurs
    description: Opérations disponibles pour les développeurs réguliers

paths:
  /:
    get:
      tags:
        - développeurs
      summary: page d'accueil du service
      operationId: home
      description: Page de bienvenue du service Films
      responses:
        '200':
          description: message de bienvenue
          content:
            text/html:
              schema:
                type: string
                example: "<h1 style='color:blue'>Bienvenue dans le service Films!</h1>"

  /json:
    get:
      tags:
        - développeurs
      summary: obtenir la base de données JSON complète
      operationId: get_json
      description: Récupère le catalogue complet des films
      responses:
        '200':
          description: base de données JSON complète des films
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllMovies'

  /moviesbytitle:
    get:
      tags:
        - développeurs
      summary: obtenir un film par son titre
      operationId: get_movie_bytitle
      description: |
        En fournissant le titre approprié, vous pouvez rechercher un film spécifique 
        dans le catalogue. La recherche est insensible à la casse.
      parameters:
        - name: title
          in: query
          description: Titre du film à rechercher
          required: true
          schema:
            type: string
            example: The Martian
      responses:
        '200':
          description: Film trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieItem'
        '400':
          description: paramètre title manquant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: titre de film non trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /movies/{movieid}:
    get:
      tags:
        - développeurs
      summary: obtenir un film par son ID
      operationId: get_movie_byid
      description: En fournissant l'ID approprié, vous pouvez obtenir les informations détaillées d'un film
      parameters:
        - name: movieid
          in: path
          description: ID du film
          required: true
          schema:
            type: string
            example: 39ab85e5-5e8e-4dc5-afea-65dc368bd7ab
      responses:
        '200':
          description: Description du film
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieItem'
        '404':
          description: ID de film non trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      tags:
        - admins
      summary: ajouter un film
      operationId: create_movie
      description: |
        Ajoute un film au système. Nécessite des privilèges administrateurs vérifiés via le service User.
        Le champ 'author' dans le corps de la requête doit contenir un ID utilisateur administrateur valide.
      parameters:
        - name: movieid
          in: path
          description: ID du film
          required: true
          schema:
            type: string
            example: 39ab85e5-5e8e-4dc5-afea-65dc368bd7ab
      requestBody:
        description: Élément film à ajouter avec le champ author pour l'authentification
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovieItemWithAuthor'
      responses:
        '201':
          description: Film créé avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Film ajouté avec succès
                  data:
                    $ref: '#/components/schemas/MovieItem'
        '400':
          description: données JSON requises manquantes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: accès refusé - droits administrateur requis
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: l'ID du film existe déjà
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      tags:
        - admins
      summary: supprimer un film
      operationId: del_movie
      description: |
        Supprime un film du catalogue. Nécessite des privilèges administrateurs vérifiés via le service User.
        Le corps de la requête doit contenir un champ 'author' avec un ID utilisateur administrateur valide.
      parameters:
        - name: movieid
          in: path
          description: ID du film
          required: true
          schema:
            type: string
            example: 39ab85e5-5e8e-4dc5-afea-65dc368bd7ab
      requestBody:
        description: Données d'authentification
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorRequest'
      responses:
        '200':
          description: Film supprimé avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Film supprimé avec succès
                  data:
                    $ref: '#/components/schemas/MovieItem'
        '400':
          description: données JSON requises manquantes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: accès refusé - droits administrateur requis
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: ID de film non trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /movies/{movieid}/{rate}:
    put:
      tags:
        - admins
      summary: mettre à jour la note d'un film
      operationId: update_movie_rating
      description: |
        Met à jour la note d'un film. Nécessite des privilèges administrateurs vérifiés via le service User.
        Le corps de la requête doit contenir un champ 'author' avec un ID utilisateur administrateur valide.
      parameters:
        - name: movieid
          in: path
          description: ID du film
          required: true
          schema:
            type: string
            example: 39ab85e5-5e8e-4dc5-afea-65dc368bd7ab
        - name: rate
          in: path
          description: Nouvelle note pour le film
          required: true
          schema:
            type: number
            minimum: 0
            maximum: 10
            example: 8.5
      requestBody:
        description: Données d'authentification
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorRequest'
      responses:
        '200':
          description: Note mise à jour avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Note mise à jour avec succès
                  data:
                    $ref: '#/components/schemas/MovieItem'
        '400':
          description: données JSON requises manquantes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: accès refusé - droits administrateur requis
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: ID de film non trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    AllMovies:
      type: array
      items:
        $ref: '#/components/schemas/MovieItem'
    
    MovieItem:
      type: object
      required:
        - title
        - rating
        - director
        - id
      properties:
        title:
          type: string
          example: The Martian
        rating:
          type: number
          example: 7.0
        director:
          type: string
          example: Ridley Scott
        id:
          type: string
          example: 39ab85e5-5e8e-4dc5-afea-65dc368bd7ab
    
    MovieItemWithAuthor:
      allOf:
        - $ref: '#/components/schemas/MovieItem'
        - type: object
          required:
            - author
          properties:
            author:
              type: string
              example: chris_rivers
              description: ID utilisateur de l'administrateur effectuant la requête
    
    AuthorRequest:
      type: object
      required:
        - author
      properties:
        author:
          type: string
          example: chris_rivers
          description: ID utilisateur de l'administrateur effectuant la requête
    
    Error:
      type: object
      properties:
        error:
          type: string
          example: Film ID non trouvé
