openapi: 3.1.1

info:
  title: Booking API
  summary: This is the API of the Booking service
  description: |
    This API manages movie bookings for users. It provides endpoints to create, read and 
    delete booking entries. The service integrates with Movie service to validate movie 
    existence and with Schedule service to verify movie availability on requested dates.
    It also uses User service to enforce admin-only access to global booking data.
  contact:
    name: Cinema Management System
    email: support@cinema.fr
  version: 1.0.0

tags:
  - name: bookings
    description: Operations related to movie bookings
  - name: admins
    description: Admin-only secured calls

paths:
  /:
    get:
      tags:
        - bookings
      summary: home page of the service
      operationId: home
      description: Welcome page for the Booking service
      responses:
        '200':
          description: welcome message
          content:
            text/html:
              schema:
                type: string
                example: "<h1 style='color:blue'>Bienvenue dans le service Réservations!</h1>"

  /bookings:
    get:
      tags:
        - admins
      summary: get all bookings (admin only)
      operationId: get_all_bookings
      description: |
        Retrieve all bookings for all users. This endpoint requires admin privileges 
        and verifies the user role via the User service.
      parameters:
        - name: userid
          in: query
          required: true
          description: User ID of the requesting user (must be admin)
          schema:
            type: string
            example: chris_rivers
      responses:
        '200':
          description: list of all bookings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserBookings'
        '400':
          description: userid parameter missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: access denied - admin rights required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      tags:
        - bookings
      summary: create a new booking
      operationId: create_booking
      description: |
        Create a new movie booking for a user. This endpoint validates the movie existence 
        via Movie service and checks the schedule via Schedule service.
      requestBody:
        description: Booking information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingRequest'
      responses:
        '201':
          description: booking created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Réservation créée avec succès
                  booking:
                    $ref: '#/components/schemas/BookingRequest'
        '400':
          description: missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: movie not found or not scheduled on this date
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: movie already booked for this date
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /bookings/{userid}:
    get:
      tags:
        - bookings
      summary: get bookings for a user
      operationId: get_user_bookings
      description: Retrieve all bookings for a specific user
      parameters:
        - name: userid
          in: path
          required: true
          description: User ID
          schema:
            type: string
            example: chris_rivers
      responses:
        '200':
          description: user bookings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserBookings'
        '404':
          description: no bookings found for this user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      tags:
        - bookings
      summary: delete all bookings for a user
      operationId: delete_all_user_bookings
      description: Remove all bookings for a specific user
      parameters:
        - name: userid
          in: path
          required: true
          description: User ID
          schema:
            type: string
            example: chris_rivers
      responses:
        '200':
          description: all user bookings deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Toutes les réservations de chris_rivers ont été supprimées
        '404':
          description: no bookings found for this user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /bookings/{userid}/detailed:
    get:
      tags:
        - bookings
      summary: get detailed bookings for a user
      operationId: get_detailed_user_bookings
      description: |
        Retrieve bookings for a user enriched with complete movie information from Movie 
        service and schedule information from Schedule service. This provides a comprehensive 
        view combining data from three services.
      parameters:
        - name: userid
          in: path
          required: true
          description: User ID
          schema:
            type: string
            example: chris_rivers
      responses:
        '200':
          description: detailed user bookings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedBookings'
        '404':
          description: no bookings found for this user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /bookings/{userid}/{movieid}/{date}:
    delete:
      tags:
        - bookings
      summary: delete a specific booking
      operationId: delete_booking
      description: Remove a specific movie booking for a user on a given date
      parameters:
        - name: userid
          in: path
          required: true
          description: User ID
          schema:
            type: string
            example: chris_rivers
        - name: movieid
          in: path
          required: true
          description: Movie ID
          schema:
            type: string
            example: 720d006c-3a57-4b6a-b18f-9b713b073f3c
        - name: date
          in: path
          required: true
          description: Date in format YYYYMMDD
          schema:
            type: string
            example: "20151130"
      responses:
        '200':
          description: booking deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Réservation supprimée avec succès
        '404':
          description: booking not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    BookingRequest:
      type: object
      required:
        - userid
        - movieid
        - date
      properties:
        userid:
          type: string
          example: chris_rivers
        movieid:
          type: string
          example: 720d006c-3a57-4b6a-b18f-9b713b073f3c
        date:
          type: string
          example: "20151130"
          description: Date in format YYYYMMDD
    
    UserBookings:
      type: object
      properties:
        userid:
          type: string
          example: chris_rivers
        dates:
          type: array
          items:
            $ref: '#/components/schemas/DateBooking'
    
    DateBooking:
      type: object
      properties:
        date:
          type: string
          example: "20151130"
        movies:
          type: array
          items:
            type: string
          example: ["720d006c-3a57-4b6a-b18f-9b713b073f3c"]
    
    DetailedBookings:
      type: object
      properties:
        userid:
          type: string
          example: chris_rivers
        bookings:
          type: array
          items:
            $ref: '#/components/schemas/DetailedDateBooking'
    
    DetailedDateBooking:
      type: object
      properties:
        date:
          type: string
          example: "20151130"
        movies:
          type: array
          items:
            $ref: '#/components/schemas/DetailedMovie'
    
    DetailedMovie:
      type: object
      properties:
        movie:
          $ref: '#/components/schemas/MovieInfo'
        schedule:
          $ref: '#/components/schemas/ScheduleInfo'
    
    MovieInfo:
      type: object
      properties:
        id:
          type: string
          example: 720d006c-3a57-4b6a-b18f-9b713b073f3c
        title:
          type: string
          example: Creed
        rating:
          type: number
          example: 8.8
        director:
          type: string
          example: Ryan Coogler
    
    ScheduleInfo:
      type: object
      properties:
        date:
          type: string
          example: "20151130"
        movieid:
          type: string
          example: 720d006c-3a57-4b6a-b18f-9b713b073f3c
        available:
          type: boolean
          example: true
    
    Error:
      type: object
      properties:
        error:
          type: string
          example: Aucune réservation trouvée pour cet utilisateur

