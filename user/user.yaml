openapi: 3.1.1

info:
  title: API Utilisateurs
  summary: API du service de gestion des utilisateurs
  description: |
    Cette API gère les utilisateurs et leurs informations d'authentification. Elle fournit 
    des endpoints pour créer, lire, mettre à jour et supprimer des utilisateurs, ainsi que 
    pour vérifier les privilèges administrateurs. Ce service est utilisé par les autres 
    microservices pour vérifier les rôles et permissions des utilisateurs.
  contact:
    name: Clovis SFEIR & Ema ALBISSON
  version: 1.0.0

tags:
  - name: utilisateurs
    description: Opérations liées à la gestion des utilisateurs
  - name: admins
    description: Opérations pour récupérer les utilisateurs administrateurs

paths:
  /:
    get:
      tags:
        - utilisateurs
      summary: page d'accueil du service
      operationId: home
      description: Page de bienvenue du service Utilisateurs
      responses:
        '200':
          description: message de bienvenue
          content:
            text/html:
              schema:
                type: string
                example: "<h1 style='color:blue'>Welcome to the User service!</h1>"

  /users:
    get:
      tags:
        - utilisateurs
      summary: obtenir tous les utilisateurs
      operationId: get_all_users
      description: Récupère la liste complète des utilisateurs du système
      responses:
        '200':
          description: liste de tous les utilisateurs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserItem'
    
    post:
      tags:
        - utilisateurs
      summary: créer un nouvel utilisateur
      operationId: create_user
      description: Ajoute un nouvel utilisateur au système
      requestBody:
        description: Objet utilisateur à créer
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserItem'
      responses:
        '201':
          description: utilisateur créé avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserItem'
        '400':
          description: l'ID utilisateur existe déjà
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{userid}:
    get:
      tags:
        - utilisateurs
      summary: obtenir un utilisateur par son ID
      operationId: get_user_by_id
      description: Récupère un utilisateur spécifique via son ID
      parameters:
        - name: userid
          in: path
          required: true
          description: ID de l'utilisateur
          schema:
            type: string
            example: chris_rivers
      responses:
        '200':
          description: utilisateur trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserItem'
        '404':
          description: utilisateur non trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      tags:
        - utilisateurs
      summary: mettre à jour un utilisateur
      operationId: update_user
      description: Met à jour les informations d'un utilisateur existant
      parameters:
        - name: userid
          in: path
          required: true
          description: ID de l'utilisateur
          schema:
            type: string
            example: chris_rivers
      requestBody:
        description: Informations utilisateur mises à jour
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserItem'
      responses:
        '200':
          description: utilisateur mis à jour avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserItem'
        '404':
          description: utilisateur non trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      tags:
        - utilisateurs
      summary: supprimer un utilisateur
      operationId: delete_user
      description: Supprime un utilisateur du système
      parameters:
        - name: userid
          in: path
          required: true
          description: ID de l'utilisateur
          schema:
            type: string
            example: chris_rivers
      responses:
        '200':
          description: utilisateur supprimé avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User deleted successfully
        '404':
          description: utilisateur non trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/admin:
    get:
      tags:
        - admins
      summary: obtenir tous les utilisateurs administrateurs
      operationId: get_admin_users
      description: Récupère la liste des utilisateurs ayant le rôle administrateur
      responses:
        '200':
          description: liste des utilisateurs administrateurs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserItem'
        '204':
          description: aucun utilisateur administrateur trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    UserItem:
      type: object
      required:
        - id
        - name
        - role
      properties:
        id:
          type: string
          example: chris_rivers
        name:
          type: string
          example: Chris Rivers
        role:
          type: string
          enum: [admin, user]
          example: admin
        last_active:
          type: integer
          example: 1360031010
          description: Timestamp Unix de la dernière activité
    
    Error:
      type: object
      properties:
        error:
          type: string
          example: User ID not found
